#lang slideshow

(require "utils.rkt" slideshow/code pict/face slideshow/play)

(define orig-assembler (current-slide-assembler))

(define my-assembler (lambda (s v-sep c)
                       (if s
                           (vc-append v-sep (inset (t s) (* 1 gap-size)) c)
                           c)))

(current-slide-assembler my-assembler)

(slide (titlet "Cheating on Racket : One hack lead to another..")
       (blank)(blank)(blank)(blank)
       (tt "Caner Derici")
       (blank)(blank)
       (tt "Nov 2017 @ wonks")
       )

(slide #:title "Pycket"
       #:name "0.1"
       (para "A JIT compiler generated by RPython framework.")
       (bitmap (build-path (current-directory) "pycket-rpython.png"))
       )

(slide #:title "Pycket AST Expansion : The Old Way"
       (bitmap (build-path (current-directory) "pycket-regular.png"))
       'next
       (bitmap (build-path (current-directory) "pycket-bytecode.png")))

(slide #:title "Racket Decides to Marry Chez"
       (para "Dump the old generic JIT runtime.")
       (blank)(blank)
       (para "Why?"))

(slide #:title "Finding The Middle Ground"
       (scale (bitmap (build-path (current-directory) "chez1.png")) 1.2)
       )
(slide #:title "Finding The Middle Ground"
       (scale (bitmap (build-path (current-directory) "chez2.png")) 1.2)
       )
(slide #:title "Finding The Middle Ground"
       (scale (bitmap (build-path (current-directory) "chez3.png")) 1.2)
       )
(slide #:title "Finding The Middle Ground"
       (scale (bitmap (build-path (current-directory) "chez4.png")) 1.2)
       )


(slide #:title "Linklets"
       (scale (bitmap (build-path (current-directory) "linklet.png")) 1.3)
       )

(slide #:title "Expander"
       (scale (code (linklet
                     ()
                     ((1/module-path-index? module-path-index?)
                      (1/identifier-binding identifier-binding)
                      (1/boot boot)
                      (1/dynamic-require dynamic-require)
                      (1/namespace-require namespace-require)
                      (1/read read)
                      (1/read-syntax read-syntax)
                      (expand$1 expand)
                      (1/eval eval)
                      ...)
                     (define-values
                       (expand$1)
                       (let-values (((expand40_0)
                                     (lambda (s39_0 ns31_2 log-expand?32_0 to-parsed?33_0
                                              serializable?34_0 ns35_0 log-expand?36_0
                                              to-parsed?37_0 serializable?38_0)
                                       ...)))))
                     (define-values
                       (1/eval)
                       (let-values (((eval6_0)
                                     (lambda (s5_0 ns1_4 compile2_0 ns3_0 compile4_0)
                                       (let-values (((s_142) s5_0)) ...))))))
                     ...))
              0.6)
       )

(slide #:title "Pycket Understands Linklets Too!"
       (scale (bitmap (build-path (current-directory) "pycket-linklets.png")) 1.2)
       )

(slide #:title "Pycket AST Expansion : The Old Way"
       (bitmap (build-path (current-directory) "pycket-regular.png"))
       (blank)
       (bitmap (build-path (current-directory) "pycket-bytecode.png")))

(slide #:title "Let's Call Racket's Expand!"
       (scale (bitmap (build-path (current-directory) "pycket-final-1.png")) 1.2)
       (scale (bitmap (build-path (current-directory) "pycket-final-2.png")) 1.2)
       )

(slide #:title "Let's Call Racket's Expand!"
       (rb-superimpose
        (scale (face 'mean) 0.3)
       (vc-append (* 2 gap-size)
                  (vc-append gap-size
                             (scale (code (define-values
                                            (expand$1)
                                            (let-values (((expand40_0)
                                                          (lambda (s39_0 ns31_2 log-expand?32_0 to-parsed?33_0 ...)
                                                            <expand-body-rkt>)))
                                              <let-body-rkt>))) 0.6)
                             (tt "Racket"))
                  (vc-append gap-size
                             (scale (code (define-values-name expand$1)
                                          (define-values-body
                                            [(let-bindings
                                           ([expand40_0 (lambda (s39_0 ns31_2 log-expand?32_0 to-parsed?33_0 ...)
                                                          <expand-body-pycket)])
                                           (let-body 
                                            <let-body-pycket>))])) 0.6)
                             (tt "Pycket")
                             ))))

(slide #:title "Let's Call Racket's Expand! : Ready"
       (vc-append (* 2 gap-size)
                  (scale
                   (code
                    (linklet
                     ()
                     ((1/module-path-index? module-path-index?)
                      (1/identifier-binding identifier-binding)
                      #,(frame (code (1/boot boot)))
                      (1/dynamic-require dynamic-require)
                      (1/namespace-require namespace-require)
                      (1/read read)
                      (1/read-syntax read-syntax)
                      (1/expand expand)
                      (1/eval eval)
                      ...) ...)) 0.6)
                  (scale
                   (code
                    (define (boot)
                      (seal)
                      (current-module-name-resolver standard-module-name-resolver)
                      (current-load/use-compiled default-load/use-compiled)
                      (current-reader-guard default-reader-guard)
                      (current-eval default-eval-handler)
                      (current-compile default-compile-handler)
                      (current-load default-load-handler)
                      (current-read-interaction default-read-interaction))) 0.6)))

(slide #:title "Let's Call Racket's Expand! : Set"
       (vc-append (* 2 gap-size)
                  (scale
                   (code
                    (linklet
                     ()
                     ((1/module-path-index? module-path-index?)
                      (1/identifier-binding identifier-binding)
                      (1/boot boot)
                      (1/dynamic-require dynamic-require)
                      #,(frame (code (1/namespace-require namespace-require)))
                      (1/read read)
                      (1/read-syntax read-syntax)
                      (1/expand expand)
                      (1/eval eval)
                      ...) ...)) 0.6)
                  (scale
                   (code
                    (namespace-require ''#%kernel)) 0.6)))

(slide #:title "Let's Call Racket's Expand! : Go"
       (vc-append (* 2 gap-size)
                  (scale
                   (code
                    (linklet
                     ()
                     ((1/module-path-index? module-path-index?)
                      (1/identifier-binding identifier-binding)
                      (1/boot boot)
                      (1/dynamic-require dynamic-require)
                      (1/namespace-require namespace-require)
                      #,(frame (code (1/read read)))
                      (1/read-syntax read-syntax)
                      #,(frame (code (1/expand expand)))
                      #,(frame (code (1/eval eval)))
                      ...) ...)) 0.6)
                  (scale
                   (code
                    (eval
                     (expand
                      (read
                       (open-input-string "(expt 2 3)"))))) 0.6)))

(slide #:title "We could also..."
       (vc-append (* 2 gap-size)
                  (scale
                   (code
                    (linklet
                     ()
                     ((1/module-path-index? module-path-index?)
                      (1/identifier-binding identifier-binding)
                      (1/boot boot)
                      #,(frame (code (1/dynamic-require dynamic-require)))
                      (1/namespace-require namespace-require)
                      (1/read read)
                      (1/read-syntax read-syntax)
                      (expand$1 expand)
                      (1/eval eval)
                      ...) ...)) 0.6)
                  (scale
                   (code
                    (dynamic-require 'racket/base 'read-eval-print-loop)) 0.6)))

#;(current-slide-assembler orig-assembler)
#;(outline 'one)
#;(current-slide-assembler my-assembler)

(define (bound-frame p)
  (frame p #:color "green"))


(slide #:title "Thanks!"
       (hc-append (* 4 gap-size)
                  (vc-append (* 4 gap-size)
                   (scale (bitmap (build-path (current-directory) "pycket-logo.png")) 0.1)
                   (scale (bitmap (build-path (current-directory) "racket-logo.png")) 0.5))
                  
                  (vr-append (* 2 gap-size)
                             (colorize (tt "Caner Derici") "darkred")
                             (scale (t "cadr/cderici") 0.6)
                             (scale (t "https://github.com/pycket/pycket/") 0.7)
                             (scale (t "IRC: freenode #pycket") 0.7)
                             (scale (t "Slack: racket #linklet") 0.7)
                             (colorize (t "Inside Racket Seminars : ") "darkred")
                             (scale (t "https://youtube.com/user/racketlang") 0.7))))
                         
