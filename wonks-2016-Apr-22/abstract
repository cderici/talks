Title : 

Abstract :

Pycket is an experimental JIT compiler that implements Racket,
developed using the RPython translation framework. It expands the
given Racket code using Racket's own macro expansion, and transforms
the fully expanded code into Pycket AST. Our idea is to obtain this
AST using Racket bytecode instead of the expanded surface code, and
see if Pycket can benefit from various optimizations performed by the
Racket bytecode compiler.

The talk will be in three parts. First we'll look into the Racket
bytecode, and talk a bit about the bytecode compiler. Second we'll
talk about transforming Racket bytecode into Pycket AST. Finally we'll
talk a bit about optimizations happening in the Racket compiler and
see some recent performance results of Pycket using the bytecode
expansion.




idiosyncratic


Pycket~\cite{Bolz:2014aa,bauman2015pycket} is an experimental Racket
implementation developed using the RPython tool
chain~\cite{armin_rigo_pypys_2006}.
The design of Pycket is unusual compared to most performance oriented language
VMs.
Rather than implement a complex bytecode machine, Pycket directly interprets
Racket's AST post macro expansion with a CEK machine~\cite{Felleisen:1987aa}.
This makes implementing many of Racket's more complex features (first
class/composable continuations, continuation marks, exceptions, impersonators,
etc.) straightforward.
This high level design enables Pycket to support a large subset of Racket code
with comparatively little development effort.

An important aspect of Pycket's design for the benchmarks to follow is Pycket's
reliance on Racket's macro expander.
Pycket operates on Racket's core forms, which are the end result of the macro
expansion process.
Rather than re-implement Racket's macro expander in RPython, Pycket makes use of
Racket's existing macro expander.
For the purposes of gradual typing, this means Pycket's performance is partially
dependent upon the code generated by Racket and its associated libraries.
Thus, the choice of Racket version (particularly the version of Typed Racket)
affects Pycket's performance.
Unless otherwise stated, Pycket results make use of Racket $6.4.0.14$.

Pycket performs little manipulation to the actual input program before execution.
The only alterations performed to the AST before interpretation are assignment
conversion and conversion to A-normal form~\citep{Danvy:1991fk,Flanagan:1993cg}
(ANF).
Pycket converts to ANF to simplify the interpreter
implementation, while assignment conversion places all mutable variables into
heap allocated cells, which allows for an immutable environment representation.
